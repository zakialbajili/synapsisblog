import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import api from "../../../../utils/axios";
import Loading from "@/components/spin";
import { Avatar, Button, Input, message, Modal } from "antd";
import { UserOutlined } from "@ant-design/icons";
import { useQuery } from "@tanstack/react-query";
import slugify from "slugify";
import Link from "next/link";
import Head from "next/head";
import LayoutPage from "@/components/layout/layoutPage";
import { useMutation } from "@tanstack/react-query";
const ProfileUser: React.FC = () => {
  const router = useRouter();
  const id = router.query.id;
  const fetchAPIDetailUser = async ({ queryKey }: { queryKey: any }) => {
    const [, id] = queryKey;
    const { data } = await api.get(`/users/${id}`);
    setFormData(data);
    return data;
  };
  const {
    data: detailUser,
    isError,
    isLoading,
  } = useQuery({
    queryKey: ["detailUser", id],
    queryFn: fetchAPIDetailUser,
    enabled: !!id,
  });
  const [formData, setFormData] = useState({
    id: "",
    name: "",
    email: "",
    gender: "male",
    status: "active",
  });
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
  const mutation = useMutation({
    mutationFn: async (data: FormData) => {
      const response = await api.put(`/users/${id}`, data);
      console.log(response);
      const rawData = localStorage.getItem("dataPersonal");
      if (rawData) {
        const parseData = JSON.parse(rawData);
        const collectData = { ...response.data, password: parseData.password };
        localStorage.setItem("dataPersonal", JSON.stringify(collectData));
      }
      return response.data;
    },
    onSuccess: () => {
      message.success("Edit data berhasil!");
      router.push(`/profile/${id}`);
    },
    onError: () => {
      message.error("Terjadi kesalahan saat edit data.");
    },
  });
  const handleUpdate = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!formData.email) {
      message.error("Email field harus diisi!");
      return;
    } else if (!formData.name) {
      message.error("Nama field harus diisi!");
      return;
    }

    const form = new FormData();
    form.append("email", formData.email);
    form.append("name", formData.name);
    form.append("gender", formData.gender);
    form.append("status", formData.status);
    mutation.mutate(form);
  };
  const [open, setOpen] = useState(false);
  const [confirmLoading, setConfirmLoading] = useState(false);
  const [modalText, setModalText] = useState(
    `Apakah kamu yakin ingin menghapus akun ini?`
  );
  const showModal = () => {
    setOpen(true);
  };
  const handleOk = async () => {
    setModalText("Sedang memproses permintaan anda");
    setConfirmLoading(true);
    try {
      await api.delete(`/users/${id}`);
      message.success("User berhasil dihapus!");
      setTimeout(() => {
        setOpen(false);
        setConfirmLoading(false);
        localStorage.removeItem('dataPersonal')
        router.push("/register");
      }, 2000);
    } catch (error) {
      message.error("Gagal menghapus user");
      setConfirmLoading(false);
    }
  };

  const handleCancel = () => {
    console.log("Clicked cancel button");
    setOpen(false);
  };
  if (isLoading) return <Loading />;
  if (isError) return <p>Terjadi kesalahan saat mengambil data</p>;
  return (
    <>
      <Head>
        <title>Blog-Synapsis</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <LayoutPage>
        <div className="flex flex-col h-full lg:flex-row">
          <div className="w-full h-full shadow-md border-r-[1px] border-border/50">
            {detailUser && (
              <div className="flex flex-col gap-5 border-b-[1px] border-border/50 p-5 items-center">
                <div className="rounded-full h-[150px] w-[150px] bg-lightGray/50">
                  <Avatar size={150} icon={<UserOutlined />} />
                </div>
                <form
                  onSubmit={handleUpdate}
                  style={{ padding: "12px", border: "0px", color: "white" }}
                  className="flex-grow w-full flex flex-col gap-3 font-poppins rounded-none bg-transparent text-white"
                >
                  <div className="flex flex-col gap-2">
                    <label htmlFor="id">ID:</label>
                    <Input
                      disabled
                      name="id"
                      type="id"
                      placeholder="Masukan id"
                      className=" placeholder:!text-lightGray/50 !bg-transparent focus:outline-1 !text-lightGray/80 rounded-lg focus:px-3 border-[1px] border-border/50 !p-2 focus:bg-transparent"
                      value={formData.id}
                      onChange={handleChange}
                    />
                  </div>
                  <div className="flex flex-col gap-2">
                    <label htmlFor="name">Nama:</label>
                    <Input
                      name="name"
                      type="name"
                      placeholder="Masukan nama"
                      className=" placeholder:!text-lightGray/50 !bg-transparent focus:outline-1 !text-lightGray/80 rounded-lg focus:px-3 border-[1px] border-border/50 !p-2 focus:bg-transparent"
                      value={formData.name}
                      onChange={handleChange}
                    />
                    <div className="flex flex-col gap-2">
                      <label htmlFor="email">Email:</label>
                      <Input
                        name="email"
                        type="email"
                        placeholder="Masukan email"
                        className=" placeholder:!text-lightGray/50 !bg-transparent focus:outline-1 !text-lightGray/80 rounded-lg focus:px-3 border-[1px] border-border/50 !p-2 focus:bg-transparent"
                        value={formData.email}
                        onChange={handleChange}
                      />
                    </div>
                  </div>
                  <Button
                    htmlType="submit"
                    className=" text-center rounded-lg p-1 flex-grow w-full mt-3 text-primerText bg-lightGray/80 border-0 hover:bg-lightGray hover:!font-semibold hover:!text-primerText p3"
                  >
                    Save Profile
                  </Button>
                  <Button
                    onClick={showModal}
                    className=" text-center rounded-lg p-1 flex-grow w-full mt-3 text-white bg-cherryRed border-0 hover:bg-lightGray hover:!font-semibold hover:!text-primerText p3"
                  >
                    Delete Account
                  </Button>
                </form>
              </div>
            )}
            <Modal
              title="Delete Account"
              open={open}
              onOk={handleOk}
              confirmLoading={confirmLoading}
              onCancel={handleCancel}
            >
              <p>{modalText}</p>
            </Modal>
            {/* {listBlog && listBlog.length > 0 ? (
              <div className="flex flex-col">
                {listBlog?.map((blog: any, index: number) => (
                  <div
                    className=" p-3 border-b-[1px] border-border/50 text-subtleGray"
                    key={index}
                  >
                    <p className="font-semibold text-lg">{blog.title}</p>
                    <p className="text-lightGray/50">{blog.body}</p>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-white font-semibold text-lg text-center">
                data tidak ditemukan
              </p>
            )} */}
          </div>
          {/* <div className="lg:block hidden h-fit lg:w-[30%] lg:m-3 rounded-2xl border-2 border-border/50 shadow-lg font-poppins">
            <h2 className="font-semibold text-2xl text-center p-3 rounded-t-lg text-subtleGray/90">
              Recent Article
            </h2>
            <div className="bg-transparent flex flex-col">
              {lastArticle.map((post: any, index: number) => {
                if (post.title.toLowerCase() !== slug) {
                  return (
                    <Link
                      href={`/blog/${slugify(post.title, {
                        lower: true,
                      })}?page=${page}`}
                      className="p-3 text-subtleGray/90 hover:text-white hover:shadow-md hover:bg-gray-900/50"
                      key={index}
                    >
                      <h3 className="font-semibold text-xl">{post.title}</h3>
                      <h3 className="text-lightGray/50 text-sm">{post.body}</h3>
                    </Link>
                  );
                }
              })}
            </div>
          </div> */}
        </div>
      </LayoutPage>
    </>
  );
};
export default ProfileUser;
